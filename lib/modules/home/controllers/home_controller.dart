import 'dart:collection';

import 'package:get/get.dart';
import 'package:ohmalware/commons/enum.dart';
import 'package:ohmalware/method_channels/scan_method_channel.dart';
import 'package:ohmalware/models/models.dart';
import 'package:ohmalware/modules/home/controllers/home_state.dart';
import 'package:ohmalware/repositories/api_client.dart';

/// Author: Duc Trung Nguyen
/// Created: 03/04/2021
/// Project: ohmalware

class HomeController extends GetxController {
  var listResultAppScanModel = <ResultAppScanModel>[].obs;
  var listAppScanModel = <Map<String, dynamic>>[].obs;
  var numberApp = 0.obs;
  var homeSate = HomeState().obs;

  @override
  void onInit() {
    super.onInit();
  }

  Future<void> scanApp() async {
    homeSate.update((val) {
      val.setHomeState = STATE.scanning;
    });

    print(' ${homeSate.value.getCurrentHomeState}');

    // TODO handle get information app
    var resultScan = await ScanMethodChannel.getInformationApp();

    if (resultScan['status'] == RESPONSE_STATUS_SCAN.success) {
      numberApp.value = resultScan['number'];

      // listAppScanModel.value.add()

      List<Map<dynamic, dynamic>>.from(resultScan['dataApp'])
          .forEach((element) {
        var a = 1;
        // ignore: invalid_use_of_protected_member
        listAppScanModel.value.add({
          'name': element['name'],
          'package': element['package'],
          'services': element['services'] ?? [],
          'permission': element['permissions'] ?? []
        });
      });

      // var a = 1;

      Map<String, dynamic> data = {'data': listAppScanModel.value};

      var listResultApp = await apiClient.uploadScan(data);

      listResultAppScanModel.value = listResultApp;
      homeSate.update((val) {
        val.setHomeState = STATE.scanSuccessfully;
      });

      var a = 1;
    } else if (resultScan['status'] == RESPONSE_STATUS_SCAN.errorScan) {
      homeSate.update((val) {
        val.setHomeState = STATE.scanError;
      });
    }

    // await Future.delayed(const Duration(milliseconds: 10000));

  }

  void resetScan() {
    listAppScanModel.value = [];
    listResultAppScanModel.value = [];
    homeSate.update((val) {
      val.setHomeState = STATE.initial;
    });
  }
}
