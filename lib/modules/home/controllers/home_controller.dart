import 'package:app_uninstaller/app_uninstaller.dart';

/// Author: Duc Trung Nguyen
/// Created: 03/04/2021
/// Project: ohmalware
///
import 'package:get/get.dart';
import 'package:ohmalware/commons/constant.dart';
import 'package:ohmalware/commons/enum.dart';
import 'package:ohmalware/method_channels/scan_method_channel.dart';
import 'package:ohmalware/models/models.dart';
import 'package:ohmalware/modules/home/controllers/home_state.dart';
import 'package:ohmalware/repositories/api_client.dart';
import 'package:device_apps/device_apps.dart';

class HomeController extends GetxController {
  var listResultAppScanModel = <ResultAppScanModel>[].obs;
  var listResultAppScanModelNormalApp = <ResultAppScanModel>[].obs;
  var listResultAppScanModelMalware = <ResultAppScanModel>[].obs;

  var listAppScanModel = <Map<String, dynamic>>[];
  var totalNumberApp = 0.obs;
  var numberMalware = 0.obs;
  var numberNormal = 0.obs;
  var homeSate = HomeState().obs;
  var listApp = <Application>[].obs;
  var status = ''.obs;

  int startTimeScan = 0;
  int endTimeScan = 0;
  var totalTimeScan = ''.obs;

  List<ResultAppScanModel> listResultApp = [];

  @override
  void onInit() {
    super.onInit();
  }

  Future<void> scanApp() async {
    startTimeScan = DateTime.now().millisecondsSinceEpoch;

    status.value = 'Scanning in your phone...';

    homeSate.update((val) {
      val.setHomeState = STATE.scanning;
    });

    await Future.delayed(const Duration(seconds: 2));
    // var resultScan = await ScanMethodChannel.getInformationApp();

    // Returns a list of only those apps that have launch intent
    List<Application> apps = await DeviceApps.getInstalledApplications(
        includeAppIcons: true,
        onlyAppsWithLaunchIntent: false,
        includeSystemApps: false);

    if (apps.isNotEmpty) {
      apps.removeWhere(
          (element) => element.packageName == 'vn.ttrustsoft.ohmalware');

      listApp.value = apps;

      apps.forEach((element) {
        listAppScanModel.add({
          'name': element.appName,
          'package': element.packageName,
          'services': element.services ?? [],
          'permissions': element.permissions ?? []
        });
      });

      status.value = 'Submitting data to server...';
      await Future.delayed(const Duration(seconds: 2));

      listResultApp = await apiClient.uploadScan({'data': listAppScanModel});

      listResultAppScanModel.value = listResultApp;

      _updateList(listResultApp);

      endTimeScan = DateTime.now().millisecondsSinceEpoch;

      totalTimeScan.value =
          DateTime.fromMillisecondsSinceEpoch(endTimeScan - startTimeScan)
              .toIso8601String()
              .split(':')
              .last;

      homeSate.update((val) {
        val.setHomeState = STATE.scanSuccessfully;
      });
    } else {
      homeSate.update((val) {
        val.setHomeState = STATE.scanError;
      });
    }
  }

  void _updateList(List<ResultAppScanModel> listResultApp) {
    totalNumberApp.value = listResultApp.length;

    listResultAppScanModelNormalApp.value = List<ResultAppScanModel>.from(
        listResultApp.where((element) => !element.isMalware));

    listResultAppScanModelMalware.value = List<ResultAppScanModel>.from(
        listResultApp.where((element) => element.isMalware));

    numberMalware.value = listResultAppScanModelMalware.length;

    numberNormal.value = listResultAppScanModelNormalApp.length;
  }

  Future<void> scanSingleApp(String package) async {
    var resultScan = await ScanMethodChannel.getInformationSingleApp(package);

    if (resultScan['status'] == RESPONSE_STATUS_SCAN.success) {}

    if (resultScan['status'] == RESPONSE_STATUS_SCAN.errorApp) {}
  }

  void resetScan() {
    listAppScanModel = [];

    listApp.value = [];
    listResultAppScanModel.value = [];
    numberMalware.value = 0;
    totalNumberApp.value = 0;
    numberNormal.value = 0;
    listResultAppScanModelMalware.value = [];
    listResultAppScanModelNormalApp.value = [];
    homeSate.update((val) {
      val.setHomeState = STATE.initial;
    });
  }

  Future<bool> uninstallApp(String packageName) async {
    final Map<String, dynamic> resultUninstallApp =
        await ScanMethodChannel.unInstallApp(packageName);

    if (resultUninstallApp['status'] == UNINSTALL_APP.success) {
      listResultApp.removeWhere((element) => element.package == packageName);
      _updateList(listResultApp);
      homeSate.update((val) {
        val.setHomeState = STATE.scanSuccessfully;
      });
      return true;
    } else {
      return false;
    }
  }
}
