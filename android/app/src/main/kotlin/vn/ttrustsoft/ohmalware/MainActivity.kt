package vn.ttrustsoft.ohmalware.ohmalware

import android.content.pm.ApplicationInfo
import android.content.pm.PackageManager
import android.util.Log
import androidx.annotation.NonNull
import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodCall
import io.flutter.plugin.common.MethodChannel
import io.flutter.plugins.GeneratedPluginRegistrant


class MainActivity : FlutterActivity() {

    private val CHANNEL = "vn.ttrustsoft.malware/scan"
    private lateinit var _result: MethodChannel.Result
    private val SYSTEM_APP_MASK: Int = ApplicationInfo.FLAG_SYSTEM or ApplicationInfo.FLAG_UPDATED_SYSTEM_APP

//    private val pm = packageManager

    override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {
        GeneratedPluginRegistrant.registerWith(flutterEngine);

        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler { call, result ->
            run {
                resultCall(call, result)
            }

        }
    }

    private fun resultCall(@NonNull call: MethodCall, result: MethodChannel.Result) {

//        Log.d("ABC", call.method)
        _result = result
        val hashMap: HashMap<String, List<String>> = HashMap<String, List<String>>()

        val listData: MutableList<HashMap<String, Any>> = mutableListOf<HashMap<String, Any>>()
        val pm = packageManager

        if (call.method == "getInformationApp") {


            val packages = pm.getInstalledApplications(PackageManager.GET_META_DATA)

            for (applicationInfo in packages) {

//                if(applicationInfo.flags and SYSTEM_APP_MASK !== 0){
//                    continue
//                }
//                if (applicationInfo.flags & )
//                    continue

                val hashMapApp: HashMap<String, Any> = HashMap<String, Any>()
                hashMapApp["package"] = applicationInfo.packageName.toString()
                hashMapApp["name"] = packageManager.getApplicationLabel(applicationInfo).toString()
                hashMapApp["services"] = listOf<String>().toList()

                val listServices: MutableList<String> = mutableListOf()

//                Log.d("test", "App: " + applicationInfo.name + " Package: " + applicationInfo.packageName)

                try {
                    val packageInfo = pm.getPackageInfo(applicationInfo.packageName, PackageManager.GET_PERMISSIONS)
                    val packageInfo2 = pm.getPackageInfo(applicationInfo.packageName, PackageManager.GET_SERVICES)


                    val requestedPermissions = packageInfo.requestedPermissions
                    val services = packageInfo2.services

                    if (requestedPermissions != null) {
                        hashMapApp["permissions"] = requestedPermissions.toList()
                    }
                    if (services != null) {
                        for (service in services) {
                            listServices.add(service.name)

                        }

                        hashMapApp["services"] = listServices.toList()

                    }
                } catch (e: PackageManager.NameNotFoundException) {
                    e.printStackTrace()
                }


                listData.add(hashMapApp)


            }
            Log.d("vao method", "Vao method getImageFromGallery")

            _result.success(listData)

        }

        if (call.method == "getInformationSingleApp") {
            val packageName = call.argument<String>("package")


            val packageInfo = packageName?.let { pm.getPackageInfo(it, PackageManager.GET_PERMISSIONS) }
            val packageInfo2 = packageName?.let { pm.getPackageInfo(it, PackageManager.GET_SERVICES) }

            





//            try {
//
//
//            }catch (e){
//
////                _result.success({
////
////                })
//
//            }






        }

    }

//    private fun isSystemApp(pInfo: PackageInfo): Boolean {
//        return pInfo.applicationInfo.flags and SYSTEM_APP_MASK !== 0
//    }


}
